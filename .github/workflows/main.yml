name: Sparsom

on:
  push:
    paths-ignore:
      - '.idea/**'
      - 'README.md'
      - 'LICENSE'
      - 'CODEOWNERS'
    branches:
      - main

jobs:
  set_version:
    name: set image name
    runs-on: ubuntu-latest
    steps:
      - name: create docker tag
        run: echo "TAG=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
    outputs:
      image: ghcr.io/${{ github.repository }}/sparsom:${{ env.TAG }}
      image_api: ghcr.io/${{ github.repository }}/sparsom-api:${{ env.TAG }}
      image_job: ghcr.io/${{ github.repository }}/sparsom-job:${{ env.TAG }}
      image_opprydding: ghcr.io/${{ github.repository }}/sparsom-opprydding:${{ env.TAG }}

  build:
    name: build docker image
    runs-on: ubuntu-latest
    needs: set_version
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17.x'
          cache: 'gradle'
      - name: test and build
        run: ./gradlew test build
      - name: build docker image
        run: docker build sparsom --pull -f Dockerfile -t ${{ needs.set_version.outputs.image }}
      - name: build api docker image
        run: docker build api --pull -f Dockerfile -t ${{ needs.set_version.outputs.image_api }}
      - name: build job docker image
        run: docker build job --pull -f Dockerfile -t ${{ needs.set_version.outputs.image_job }}
      - name: build opprydding docker image
        run: docker build opprydding --pull -f Dockerfile -t ${{ needs.set_version.outputs.image_opprydding }}
      - name: push docker image
        run: |
          docker login ghcr.io --username "$GITHUB_REPOSITORY" -p ${{ secrets.GITHUB_TOKEN }}
          docker push ${{ needs.set_version.outputs.image }}
          docker push ${{ needs.set_version.outputs.image_api }}
          docker push ${{ needs.set_version.outputs.image_job }}
          docker push ${{ needs.set_version.outputs.image_opprydding }}

  deployDev:
    name: deploy to dev
    needs: [set_version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: deploy/dev.yml,deploy/dev-db.yml
          IMAGE: ${{ needs.set_version.outputs.image }}
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: deploy/dev-api.yml
          IMAGE: ${{ needs.set_version.outputs.image_api }}
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: deploy/dev-opprydding.yml,deploy/dev-db.yml
          IMAGE: ${{ needs.set_version.outputs.image_opprydding }}

  deployProd:
    name: deploy to prod
    needs: [set_version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: deploy/prod.yml,deploy/prod-db.yml
          IMAGE: ${{ needs.set_version.outputs.image }}
#      - uses: nais/deploy/actions/deploy@v1
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: prod-gcp
#          RESOURCE: deploy/prod-api.yml,deploy/prod-db.yml
#          IMAGE: ${{ needs.set_version.outputs.image_api }}